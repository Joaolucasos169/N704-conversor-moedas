# ----- Closure -----
def criar_conversor(taxa_origem, taxa_destino):
    def converter(valor):
        return valor * (taxa_destino / taxa_origem)
    return converter

# ----- Fun√ß√£o de alta ordem -----
def aplicar_funcao_extra(funcao, extra_func):
    def nova_funcao(valor):
        return extra_func(funcao(valor))
    return nova_funcao

# ----- Taxas fict√≠cias -----
taxas = {
    "BRL": 1.0,   # Real
    "USD": 5.0,   # D√≥lar 
    "EUR": 6.0,   # Euro 
    "GBP": 7.0    # Libra 
}

# ----- Lambda para arredondamento -----
arredondar = lambda x: round(x, 2)

def main():
    print("üí± Conversor de Moedas - N704 Programa√ß√£o Funcional")
    print("Moedas dispon√≠veis:", ", ".join(taxas.keys()))

    moeda_origem = input("Digite a moeda de origem: ").upper()
    if moeda_origem not in taxas:
        print("Moeda inv√°lida!")
        return

    valor = float(input("Digite o valor: "))

    moeda_destino = input("Digite a moeda de destino: ").upper()
    if moeda_destino not in taxas:
        print("Moeda inv√°lida!")
        return

    # Criar closure para convers√£o direta
    conversor = criar_conversor(taxas[moeda_origem], taxas[moeda_destino])

    # Fun√ß√£o de alta ordem aplicando arredondamento
    conversor_com_arredondamento = aplicar_funcao_extra(conversor, arredondar)

    resultado = conversor_com_arredondamento(valor)
    print(f"\nüíπ {valor} {moeda_origem} = {resultado} {moeda_destino}")

    # ----- List comprehension -----
    print("\nüìä Tabela de convers√µes para todas as moedas:")
    tabela = [
        f"{moeda}: {arredondar(conversor(valor * (taxas[moeda_origem] / taxas[moeda]), ))}"
        for moeda in taxas.keys()
    ]
    print("\n".join(tabela))

if __name__ == "__main__":
    main()
